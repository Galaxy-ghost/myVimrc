"===  which_key_map ===
let g:mapleader="\<Space>"
let g:which_key_map = {
    \'name' : '+Leader',
    \'a' : '宏符号@',
    \'.' : '重复上一步的easymotion',
    \'f' : 'easymotion向后查找',
    \'s' : 'easymotion全文查找',
    \'l' : 'easymotion向右查找',
    \'k' : 'easymotion向下查找',
    \'i' : 'easymotion向上查找',
    \'j' : 'easymotion向左查找',
    \'ig' : '可视化缩进',
    \'m' : 'markdown预览',
    \'o' : '打开目录树',
    \'to' : '打开标签树',
    \'t' : '查看变量类型',
    \'r' : '重新加载vim配置',
    \'p' : '安装插件',
    \'=' : '全文缩进格式化',
    \'e' : {
        \'n':'跳到下一个语法错误',
        \'p':'跳到上一个语法错误',
        \},
    \'c' : {
        \'c': '注释选中部分或当前行',
        \'u': '取消注释',
        \'a': '',
        \'y': '先复制在注释',
        \'s': '使用块布局注释',
        \'<SPC>': '自动判断注释还是取消',
        \'$': '注释当前到行尾',
        \'A': '在当前行尾插入注释',
        \'m': '多行注释只用一个标签,如/**/',
        \'n': '强制嵌套注释',
        \'l': '分隔符沿左侧对齐',
        \'i': '切换选定行的注释状态',
        \'b': '分隔符沿两侧对齐',
        \},
    \}

let g:which_key_w = {
    \'name' : '+windows' ,
    \'j' : '进入左窗口',
    \'l' : '进入右窗口',
    \'i' : '进入上方窗口',
    \'k' : '进入下方窗口',
    \'o' : '左右分屏',
    \'u' : '上下分屏',
    \'-' : '缩小窗口',
    \'=' : '放大窗口',
    \'n' : '取消所有窗口',
    \}
let g:which_key_m = {
    \'name' : '+mark, m<对应字母>表示创建标签, dm<对应字母>表示删除' ,
    \',' : '进入下一个标签',
    \'.' : '按顺序自动创建标签',
    \'n' : '下一个标签',
    \'p' : '上一个标签',
    \}


autocmd! VimEnter * call which_key#register('<space>', 'g:which_key_map')
autocmd  VimEnter * call which_key#register('w', 'g:which_key_w')
autocmd  VimEnter * call which_key#register('m', 'g:which_key_m')



nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> w :WhichKey 'w'<CR>
nnoremap <silent> m :WhichKey 'm'<CR>


set timeoutlen=1000


